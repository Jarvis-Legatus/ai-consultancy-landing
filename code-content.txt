=== FOLDER STRUCTURE ===
📁 FasterOperations Landing Page/
├── 📁 app/
│   ├── 📁 cookies-policy/
│   │   └── 📄 page.tsx
│   ├── 📁 terms-conditions/
│   │   └── 📄 page.tsx
│   ├── 🎨 globals.css
│   ├── 📄 layout.tsx
│   ├── 📄 page.tsx
│   └── 📄 providers.tsx
├── 📁 components/
│   ├── 📁 icons/
│   │   ├── 📄 Anthropic.tsx
│   │   ├── 📄 Asana.tsx
│   │   ├── 📄 Azure.tsx
│   │   ├── 📄 Docker.tsx
│   │   ├── 📄 Facebook.tsx
│   │   ├── 📄 Gemini.tsx
│   │   ├── 📄 Google.tsx
│   │   ├── 📄 GoogleCloud.tsx
│   │   ├── 📄 GoogleDrive.tsx
│   │   ├── 📄 index.ts
│   │   ├── 📄 N8n.tsx
│   │   ├── 📄 Openai.tsx
│   │   ├── 📄 Pinecone.tsx
│   │   ├── 📄 Postgres.tsx
│   │   ├── 📄 Qdrant.tsx
│   │   ├── 📄 Slack.tsx
│   │   └── 📄 Supabase.tsx
│   ├── 📁 magicui/
│   │   ├── 📄 animated-list.tsx
│   │   ├── 📄 dot-pattern.tsx
│   │   ├── 📄 flickering-grid.tsx
│   │   ├── 📄 interactive-grid-pattern.tsx
│   │   ├── 📄 interactive-hover-button.tsx
│   │   ├── 📄 magic-card.tsx
│   │   ├── 📄 morphing-text.tsx
│   │   ├── 📄 number-ticker.tsx
│   │   ├── 📄 pulsating-button.tsx
│   │   ├── 📄 ripple.tsx
│   │   ├── 📄 scroll-progress.tsx
│   │   └── 📄 shimmer-button.tsx
│   ├── 📁 ui/
│   │   ├── 📄 accordion.tsx
│   │   ├── 📄 alert-dialog.tsx
│   │   ├── 📄 alert.tsx
│   │   ├── 📄 aspect-ratio.tsx
│   │   ├── 📄 avatar.tsx
│   │   ├── 📄 badge.tsx
│   │   ├── 📄 breadcrumb.tsx
│   │   ├── 📄 button.tsx
│   │   ├── 📄 calendar.tsx
│   │   ├── 📄 card.tsx
│   │   ├── 📄 carousel.tsx
│   │   ├── 📄 chart.tsx
│   │   ├── 📄 checkbox.tsx
│   │   ├── 📄 collapsible.tsx
│   │   ├── 📄 command.tsx
│   │   ├── 📄 context-menu.tsx
│   │   ├── 📄 dialog.tsx
│   │   ├── 📄 drawer.tsx
│   │   ├── 📄 dropdown-menu.tsx
│   │   ├── 📄 form.tsx
│   │   ├── 📄 hover-card.tsx
│   │   ├── 📄 input-otp.tsx
│   │   ├── 📄 input.tsx
│   │   ├── 📄 label.tsx
│   │   ├── 📄 menubar.tsx
│   │   ├── 📄 navigation-menu.tsx
│   │   ├── 📄 pagination.tsx
│   │   ├── 📄 popover.tsx
│   │   ├── 📄 progress.tsx
│   │   ├── 📄 radio-group.tsx
│   │   ├── 📄 resizable.tsx
│   │   ├── 📄 scroll-area.tsx
│   │   ├── 📄 scroll-to-top.tsx
│   │   ├── 📄 ScrollToTopButton.tsx
│   │   ├── 📄 select.tsx
│   │   ├── 📄 separator.tsx
│   │   ├── 📄 sheet.tsx
│   │   ├── 📄 sidebar.tsx
│   │   ├── 📄 skeleton.tsx
│   │   ├── 📄 slider.tsx
│   │   ├── 📄 sonner.tsx
│   │   ├── 📄 switch.tsx
│   │   ├── 📄 table.tsx
│   │   ├── 📄 tabs.tsx
│   │   ├── 📄 textarea.tsx
│   │   ├── 📄 toast.tsx
│   │   ├── 📄 toaster.tsx
│   │   ├── 📄 toggle-group.tsx
│   │   ├── 📄 toggle.tsx
│   │   └── 📄 tooltip.tsx
│   ├── 📄 book-consultation.tsx
│   ├── 📄 case-studies.tsx
│   ├── 📄 faq.tsx
│   ├── 📄 faq2.tsx
│   ├── 📄 faq2B.tsx
│   ├── 📄 footer.tsx
│   ├── 📄 header.tsx
│   ├── 📄 hero.tsx
│   ├── 📄 language-selector.tsx
│   ├── 📄 ProjectDescriptionRenderer.tsx
│   ├── 📄 projects.tsx
│   ├── 📄 services.tsx
│   ├── 📄 SlideArrowButton.tsx
│   ├── 📄 tag-slide.tsx
│   ├── 📄 theme-provider.tsx
│   ├── 📄 theme-toggle.tsx
│   └── 📄 trust-indicators.tsx
├── 📁 context/
│   └── 📄 ActiveSectionContext.tsx
├── 📁 hooks/
│   ├── 📄 use-mobile.tsx
│   └── 📄 use-toast.ts
├── 📁 lib/
│   └── 📄 utils.ts
├── 📁 locales/
│   ├── 📋 en.json
│   ├── 📋 es.json
│   ├── 📋 fr.json
│   └── 📋 it.json
├── 📁 public/
│   └── 📁 favicon_io/
├── 📄 code-content.txt
├── 📋 components.json
├── 📄 next-env.d.ts
├── 📋 package.json
├── 📋 pnpm-lock.yaml
├── 📄 tailwind.config.ts
└── 📋 tsconfig.json


=== FILE CONTENTS ===
//////////////////////////////////////////// context\ActiveSectionContext.tsx //////////////////////////////////////////// 
"use client"

import React, { createContext, useContext, useState, ReactNode } from "react"

interface ActiveSectionContextType {
  activeSection: string;
  setActiveSection: (section: string) => void;
}

const ActiveSectionContext = createContext<ActiveSectionContextType | undefined>(undefined)

export function ActiveSectionProvider({ children }: { children: ReactNode }) {
  const [activeSection, setActiveSection] = useState("")

  return (
    <ActiveSectionContext.Provider value={{ activeSection, setActiveSection }}>
      {children}
    </ActiveSectionContext.Provider>
  )
}

export function useActiveSection() {
  const context = useContext(ActiveSectionContext)
  if (context === undefined) {
    throw new Error("useActiveSection must be used within an ActiveSectionProvider")
  }
  return context
}

//////////////////////////////////////////// components\projects.tsx //////////////////////////////////////////// 
'use client';

import * as React from 'react';
import { useState, useRef } from 'react';
import Image from 'next/image';
import { motion, useInView } from "framer-motion";
import { useLanguage } from './language-selector';
import dynamic from 'next/dynamic';
import { cn } from '@/lib/utils';
import { Card, CardContent } from "@/components/ui/card"; // Import Card

const MagicCard = dynamic(() => import('@/components/magicui/magic-card').then(mod => mod.MagicCard), { ssr: false });
const NumberTicker = dynamic(() => import('@/components/magicui/number-ticker').then(mod => mod.NumberTicker), { ssr: false });
import { ProjectDescriptionRenderer } from './ProjectDescriptionRenderer';

type ProjectStat = {
  value: string;
  label: string;
};

type ProjectContentBlock =
  | { type: 'paragraph'; content: string }
  | { type: 'heading'; level: 1 | 2 | 3 | 4 | 5 | 6; content: string }
  | { type: 'list'; items: string[] };

type Project = {
  image: string;
  alt: string;
  buttonTitle: string;
  title: string;
  description: ProjectContentBlock[];
  stats: ProjectStat[];
};

export default function ProjectShowcase(): React.JSX.Element {
  const ref = useRef(null);
  const isInView = useInView(ref, { once: true, amount: 0.2 });
  const { t } = useLanguage();
  const [selected, setSelected] = useState(0);
  const projects: Project[] = Array.isArray(t("projects.items", { returnObjects: true }))
    ? t<Project[]>("projects.items", { returnObjects: true })
    : [];
  const project = projects[selected];

  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
        delayChildren: 0.3,
      },
    },
  };

  const item = {
    hidden: { opacity: 0, y: 50 },
    show: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.8,
        ease: [0.22, 1, 0.36, 1],
      },
    },
  };

  return (
    <section id="projects" className="py-10">
      <div className="section-container py-16 bg-background">
        <div className="text-center max-w-3xl mx-auto mb-16">
          <motion.h2
            ref={ref}
            initial={{ opacity: 0, y: 50 }}
            animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 50 }}
            transition={{ duration: 0.8, ease: [0.22, 1, 0.36, 1] }}
            className="text-4xl font-bold tracking-tight text-foreground sm:text-5xl mb-6"
          >
            {t("projects.title")}
          </motion.h2>
          <motion.p
            initial={{ opacity: 0, y: 50 }}
            animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 50 }}
            transition={{ duration: 0.8, delay: 0.2, ease: [0.22, 1, 0.36, 1] }}
            className="text-xl text-muted-foreground"
          >
            {t("projects.subtitle")}
          </motion.p>
        </div>

        {/* Navigation */}
        <motion.nav
          variants={container}
          initial="hidden"
          animate={isInView ? "show" : "hidden"}
          className="flex gap-4 mb-6"
        >
          {Array.isArray(projects) && projects.map((_, idx) => (
            <motion.div
              key={idx}
              variants={item}
              className="flex-1 h-full" // Added flex-1 and h-full here
            >
              <MagicCard
                className={cn(
                  "transition-all duration-500 group-hover:card-shadow-hover overflow-hidden group", // Removed flex-1 and h-full from here
                  selected === idx
                    ? "bg-background"
                    : "bg-background"
                )}
              >
                <Card className="h-full w-full border-none shadow-none">
                  <button
                    className={cn(
                      "w-full h-full py-3 px-4 font-medium text-sm rounded-[var(--radius)] transition-opacity duration-200",
                      selected === idx
                        ? "text-foreground"
                        : "text-muted-foreground opacity-50"
                    )}
                    onClick={() => setSelected(idx)}
                    type="button"
                  >
                    {projects[idx].buttonTitle}
                  </button>
                </Card>
              </MagicCard>
            </motion.div>
          ))}
        </motion.nav>

        {/* Content */}
        {project && (
          <motion.div variants={item}>
            <MagicCard className="h-full transition-all duration-500 group-hover:card-shadow-hover overflow-hidden group bg-background p-6 md:p-8">
              <Card className="h-full w-full border-none shadow-none">
                <div className="flex flex-col md:flex-row gap-6 md:gap-8 items-stretch">
                  {/* Image */}
                  <div className="flex-none w-full aspect-[7/8] md:w-[400px] rounded-xl overflow-hidden bg-muted flex items-center justify-center shadow-sm">
                    <Image
                      src={project.image}
                      alt={project.alt}
                      width={300}
                      height={300}
                      className="object-cover w-full h-full"
                    />
                  </div>

                  {/* Info */}
                  <div className="flex-1 flex flex-col justify-center gap-4 pt-3">
                    <p className="text-sm font-medium text-muted-foreground">
                      {String(selected + 1).padStart(2, '0')}
                    </p>
                    <h3 className="font-semibold text-2xl text-foreground">
                      {project.title}
                    </h3>
                    <ProjectDescriptionRenderer description={project.description} />
                    <div className="flex flex-wrap gap-4 mt-6">
                      {Array.isArray(project.stats) && project.stats.map(stat => (
                        <Card
                          key={stat.label}
                          className="flex-1 min-w-[120px] bg-card border border-border text-center card-shadow"
                        >
                          <CardContent className="p-6">
                            <strong className="block text-2xl font-bold text-primary">
                              {(() => {
                                const match = stat.value.match(/^(\d+(\.\d+)?)(.*)$/);
                                if (match) {
                                  const value = parseFloat(match[1]);
                                  const suffix = match[3];
                                  return (
                                    <>
                                      <NumberTicker value={value} />{suffix}
                                    </>
                                  );
                                }
                                return stat.value;
                              })()}
                            </strong>
                            <p className="text-sm text-muted-foreground mt-2">
                              {stat.label}
                            </p>
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  </div>
                </div>
              </Card>
            </MagicCard>
          </motion.div>
        )}
      </div>
    </section>
  );
}

//////////////////////////////////////////// components\services.tsx //////////////////////////////////////////// 
"use client"

import { useRef, useState, useEffect } from "react"
import { motion, useInView } from "framer-motion"
import { MessageSquare, FileText, BarChart3, Workflow, Code } from "lucide-react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { useLanguage } from "./language-selector"
import dynamic from 'next/dynamic';
import { useActiveSection } from "@/context/ActiveSectionContext"

const MagicCard = dynamic(() => import('@/components/magicui/magic-card').then(mod => mod.MagicCard), { ssr: false });

export function Services() {
  const ref = useRef(null)
  const isInView = useInView(ref, { once: true, amount: 0.2 })
  const { t } = useLanguage()
  const { activeSection } = useActiveSection()
  const [animationKey, setAnimationKey] = useState(0)

  useEffect(() => {
    if (activeSection === "#services") {
      setAnimationKey(prevKey => prevKey + 1)
    }
  }, [activeSection])

  const services = [
    {
      icon: MessageSquare,
      title: t("service.chatbot.title"),
      description: t("service.chatbot.description"),
      benefit: t("service.chatbot.benefit"),
    },
    {
      icon: FileText,
      title: t("service.document.title"),
      description: t("service.document.description"),
      benefit: t("service.document.benefit"),
    },
    /*
    {
      icon: BarChart3,
      title: t("service.bi.title"),
      description: t("service.bi.description"),
      benefit: t("service.bi.benefit"),
    },
    */
    {
      icon: Workflow,
      title: t("service.automation.title"),
      description: t("service.automation.description"),
      benefit: t("service.automation.benefit"),
    },
    {
      icon: Code,
      title: t("service.custom.title"),
      description: t("service.custom.description"),
      benefit: t("service.custom.benefit"),
    },
  ]

  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
        delayChildren: 0.3,
      },
    },
  }

  const item = {
    hidden: { opacity: 0, y: 50 },
    show: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.8,
        ease: [0.22, 1, 0.36, 1],
      },
    },
  }

  return (
    <section id="services" className="py-10">
      <div className="section-container py-16 mt-24 bg-background">
        <div className="text-center max-w-3xl mx-auto mb-16">
          <motion.h2
            ref={ref}
            initial={{ opacity: 0, y: 50 }}
            animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 50 }}
            transition={{ duration: 0.8, ease: [0.22, 1, 0.36, 1] }}
            className="text-4xl sm:text-5xl font-bold text-foreground mb-6"
          >
            {t("services.title")}
          </motion.h2>
          <motion.p
            initial={{ opacity: 0, y: 50 }}
            animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 50 }}
            transition={{ duration: 0.8, delay: 0.2, ease: [0.22, 1, 0.36, 1] }}
            className="text-xl text-muted-foreground"
          >
            {t("services.subtitle")}
          </motion.p>
        </div>

        <motion.div
          key={animationKey}
          variants={container}
          initial="hidden"
          animate={isInView ? "show" : "hidden"}
          className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-8"
        >
          {services.map((service, index) => (
            <ServiceCard key={index} service={service} index={index} item={item} t={t} />
          ))}
        </motion.div>
      </div>
    </section>
  )
}

interface ServiceCardProps {
  service: {
    icon: any; // Replace 'any' with a more specific type if available
    title: string | string[];
    description: string | string[];
    benefit: string | string[];
  };
  index: number;
  item: any; // Replace 'any' with a more specific type if available
  t: (key: string) => string | string[];
}

function ServiceCard({ service, index, item, t }: ServiceCardProps) {
  const Icon = service.icon

  return (
    <motion.div variants={item}>
      <MagicCard
        className="h-full transition-all duration-500 group-hover:card-shadow-hover overflow-hidden group bg-background mb-4"
      >
        <Card className="h-full w-full border-none shadow-none">
          <CardHeader className="pb-2">
            <motion.div
              initial={{ scale: 1 }}
              whileHover={{ scale: 1.1, rotate: 5 }}
              transition={{ type: "spring", stiffness: 400, damping: 10 }}
              className="w-14 h-14 rounded-lg bg-primary/10 flex items-center justify-center mb-4 group-hover:bg-primary/20 transition-colors duration-300"
            >
              <Icon className="h-7 w-7 text-primary" />
            </motion.div>
            <CardTitle className="text-2xl font-semibold">{service.title}</CardTitle>
          </CardHeader>
          <CardContent>
            <CardDescription className="text-muted-foreground mb-4 text-base">{service.description}</CardDescription>
            <div className="pt-4 border-t border-border">
              <p className="text-sm font-medium text-primary mb-2">{t("service.outcome")}</p>
              <p className="text-foreground/90 mt-1">{service.benefit}</p>
            </div>
          </CardContent>
        </Card>
      </MagicCard>
    </motion.div>
  )
}


//////////////////////////////////////////// components\SlideArrowButton.tsx //////////////////////////////////////////// 
import React from "react";
import { ArrowRight } from "lucide-react";

interface SlideArrowButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  text?: string;
  primaryColor?: string;
}

export default function SlideArrowButton({
  text = "Get Started",
  primaryColor = "#6f3cff",
  className = "",
  ...props
}: SlideArrowButtonProps) {
  return (
    <button
      className={`group relative rounded-full border border-white bg-white p-2 text-xl font-semibold ${className}`}
      {...props}
    >
      <div
        className="absolute left-0 top-0 flex h-full w-11 items-center justify-end rounded-full transition-all duration-200 ease-in-out group-hover:w-full"
        style={{ backgroundColor: primaryColor }}
      >
        <span className="mr-3 text-white transition-all duration-200 ease-in-out">
          <ArrowRight size={20} />
        </span>
      </div>
      <span className="relative left-4 z-10 whitespace-nowrap px-8 font-semibold text-black transition-all duration-200 ease-in-out group-hover:-left-3 group-hover:text-white">
        {text}
      </span>
    </button>
  );
}

//////////////////////////////////////////// components\trust-indicators.tsx //////////////////////////////////////////// 
// components/trust-indicators.tsx
"use client"

import { useRef, useState, useEffect } from "react"
import { motion, useInView } from "framer-motion"
import Image from "next/image"
import { useLanguage } from "./language-selector"
import { Card } from "@/components/ui/card"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import dynamic from 'next/dynamic';
import { useActiveSection } from "@/context/ActiveSectionContext"

// Dynamically import MagicCard to avoid SSR issues

const MagicCard = dynamic(() => import('@/components/magicui/magic-card').then(mod => mod.MagicCard), { ssr: false });
const NumberTicker = dynamic(() => import('@/components/magicui/number-ticker').then(mod => mod.NumberTicker), { ssr: false });

// Import SVG Icon Components
import OpenaiIcon from '@/components/icons/Openai';
import N8nIcon from '@/components/icons/N8n';
import AnthropicIcon from '@/components/icons/Anthropic';
import GeminiIcon from '@/components/icons/Gemini';
import QdrantIcon from '@/components/icons/Qdrant';



const StarIcon = ({ filled }: { filled: boolean }) => (
  <svg
    className={`w-4 h-4 ${filled ? "fill-foreground" : "fill-foreground opacity-50"}`}
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 256 256"
  >
    <path d="M234.29,114.85l-45,38.83L203,211.75a16.4,16.4,0,0,1-24.5,17.82L128,198.49,77.47,229.57A16.4,16.4,0,0,1,53,211.75l13.76-58.07-45-38.83A16.46,16.46,0,0,1,31.08,86l59-4.76,22.76-55.08a16.36,16.36,0,0,1,30.27,0l22.75,55.08,59,4.76a16.46,16.46,0,0,1,9.37,28.86Z"/>
  </svg>
);

const partners = [
  { name: "OpenAI", LogoComponent: OpenaiIcon },
  { name: "n8n", LogoComponent: N8nIcon },
  { name: "Anthropic", LogoComponent: AnthropicIcon },
  { name: "Gemini", LogoComponent: GeminiIcon },
  { name: "Qdrant", LogoComponent: QdrantIcon },
];

  // --- Testimonials Below ---

const testimonials = [
  {
    quoteKey: "testimonial1.quote",
    authorKey: "testimonial1.author",
    positionKey: "testimonial1.position",
    rating: 5,
    image: "/faceholder.avif",
  },
  {
    quoteKey: "testimonial2.quote",
    authorKey: "testimonial2.author",
    positionKey: "testimonial2.position",
    rating: 5,
    image: "/faceholder.avif",
  },

  {
    quoteKey: "testimonial3.quote",
    authorKey: "testimonial3.author",
    positionKey: "testimonial3.position",
    rating: 4,
    image: "/faceholder.avif",
  },
]

export function TrustIndicators() {
  const ref = useRef(null)
  const isInView = useInView(ref, { once: true, amount: 0.1 }) // Adjusted amount slightly
  const { t } = useLanguage()
  const { activeSection } = useActiveSection()
  const [animationKey, setAnimationKey] = useState(0)

  useEffect(() => {
    if (activeSection === "#about") { // Assuming #about is the ID for this section
      setAnimationKey(prevKey => prevKey + 1)
    }
  }, [activeSection])

  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
        delayChildren: 0.3, // Consistent delay
      },
    },
  }

  const item = {
    hidden: { opacity: 0, y: 50 }, // Consistent animation direction
    show: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.8, // Consistent duration
        ease: [0.22, 1, 0.36, 1], // Consistent easing
      },
    },
  }

  return (
    <section id="about" className="py-10"> {/* Added id="about" assuming this section covers it */}
      <div className="section-container py-16 bg-background">
        <div className="text-center max-w-3xl mx-auto mb-16">
          <motion.h2
            ref={ref} // Attach ref to the first animated element in view
            initial={{ opacity: 0, y: 50 }}
            animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 50 }}
            transition={{ duration: 0.8, ease: [0.22, 1, 0.36, 1] }}
            className="text-4xl sm:text-5xl font-bold text-foreground mb-6"
          >
            {t("testimonials.title")}
          </motion.h2>
          <motion.p
            initial={{ opacity: 0, y: 50 }}
            animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 50 }}
            transition={{ duration: 0.8, delay: 0.2, ease: [0.22, 1, 0.36, 1] }}
            className="text-xl text-muted-foreground"
          >
            {t("testimonials.subtitle")}
          </motion.p>
        </div>
        {/* Partner Logos Section */}
        <motion.div
          key={`partners-${animationKey}`}
          variants={container}
          initial="hidden"
          animate={isInView ? "show" : "hidden"}
          className="flex flex-wrap justify-center items-center gap-8 md:gap-12 mb-20"
        >
          {partners.map((partner, index) => {
            const Logo = partner.LogoComponent; // Get the component constructor
            return (
              <motion.div
                key={index}
                variants={item} // Apply item animation to each logo
                whileHover={{ scale: 1.05 }} // Slightly reduced scale for subtlety
                className="flex items-center justify-center grayscale hover:grayscale-0 transition-all duration-300"
              >
                <Logo
                  className="h-10 w-auto text-foreground" // Applied consistent sizing and text color for currentColor
                />
              </motion.div>
            );
          })}
        </motion.div>

        {/* Hero Section */}
        <motion.div
          key={`hero-${animationKey}`}
          variants={container}
          initial="hidden"
          animate={isInView ? "show" : "hidden"}
          className="grid grid-cols-1 md:grid-cols-5 gap-8 mb-8 items-start"
        >
          <motion.div variants={item} className="md:col-span-3 order-2 md:order-1">
            <MagicCard className="h-full">
              <Card className="h-full flex flex-col justify-center p-6 border-none shadow-none bg-transparent min-h-[300px]">
                <p className="text-xl lg:text-2xl font-medium leading-snug text-foreground text-center">
                  <span
                    dangerouslySetInnerHTML={{
                      __html: t("testimonials.trustQuote") as string,
                    }}
                  />
                </p>
                <div className="flex justify-center mt-4">
                  <svg className="w-12 h-12 text-muted-foreground" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 256" fill="currentColor">
                    <path d="M116,72v88a48.05,48.05,0,0,1-48,48,8,8,0,0,1,0-16,32,32,0,0,0,32-32v-8H40a16,16,0,0,1-16-16V72A16,16,0,0,1,40,56h60A16,16,0,0,1,116,72ZM216,56H156a16,16,0,0,0-16,16v64a16,16,0,0,0,16,16h60v8a32,32,0,0,1-32,32,8,8,0,0,0,0,16,48.05,48.05,0,0,0,48-48V72A16,16,0,0,0,216,56Z"/>
                  </svg>
                </div>
              </Card>
            </MagicCard>
          </motion.div>
          <motion.div variants={item} className="md:col-span-2 md:aspect-auto order-1 md:order-2">
            <MagicCard className="w-full md:h-full">
              {/* The Card is absolutely positioned to fill the MagicCard, bypassing an internal layout issue. */}
              <Card className="flex flex-col p-6 border-none shadow-none bg-transparent">
                {/* The inner div uses flex-1 to fill the padded space within the Card. */}
                <div className="relative rounded-md overflow-hidden h-[250px]">
                  <Image
                    src="/Artemis-ken.png"
                    alt="AI-powered operations"
                    width={500}
                    height={300}
                    className="object-cover w-full h-full"
                  />
                </div>
              </Card>
            </MagicCard>
          </motion.div>
        </motion.div>
        {/* Testimonials Section */}
        <motion.div
          key={`testimonials-${animationKey}`}
          variants={container}
          initial="hidden"
          animate={isInView ? "show" : "hidden"}
          className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-10"
        >
          {testimonials.map((testimonial, index) => (
            <motion.div key={index} variants={item}>
              <MagicCard className="h-full">
                <Card className="h-full flex flex-col p-6 border-none shadow-none bg-transparent">
                  <div className="flex gap-1 mb-4">
                    {[...Array(5)].map((_, i) => (
                      <StarIcon key={i} filled={i < testimonial.rating} />
                    ))}
                  </div>
                  <p className="text-base leading-relaxed text-muted-foreground mb-6 flex-grow">
                    {t(testimonial.quoteKey)}
                  </p>
                  <div className="flex items-center gap-4">
                      <Avatar>
                        <AvatarImage src={testimonial.image} alt={t(testimonial.authorKey) as string} />
                        <AvatarFallback>{(t(testimonial.authorKey) as string).charAt(0)}</AvatarFallback>
                      </Avatar>
                    <div>
                      <h4 className="text-sm font-semibold text-foreground">
                        {t(testimonial.authorKey)}
                      </h4>
                      <p className="text-sm text-muted-foreground">
                        {t(testimonial.positionKey)}
                      </p>
                    </div>
                  </div>
                </Card>
              </MagicCard>
            </motion.div>
          ))}
        </motion.div>

        {/* Stats Section */}
        <motion.div
          key={`stats-${animationKey}`}
          variants={container}
          initial="hidden"
          animate={isInView ? "show" : "hidden"}
          className="grid grid-cols-1 md:grid-cols-3 gap-8 text-center"
        >
          <motion.div variants={item} className="stat-item">
            <h3 className="font-bold text-5xl text-foreground mb-2 tracking-tight">
              <NumberTicker value={parseInt(t("stats.projectsCompleted.value") as string)} />+
            </h3>
            <p className="text-base text-muted-foreground">
              {t("stats.projectsCompleted.label")}
            </p>
          </motion.div>
          <motion.div variants={item} className="stat-item">
            <h3 className="font-bold text-5xl text-foreground mb-2 tracking-tight">
              <NumberTicker value={parseFloat(t("stats.clientSatisfaction.value") as string)} />%
            </h3>
            <p className="text-base text-muted-foreground">
              {t("stats.clientSatisfaction.label")}
            </p>
          </motion.div>
          <motion.div variants={item} className="stat-item">
            <h3 className="font-bold text-5xl text-foreground mb-2 tracking-tight">
              <NumberTicker value={parseInt(t("stats.yearsExperience.value") as string)} />+
            </h3>
            <p className="text-base text-muted-foreground">
              {t("stats.yearsExperience.label")}
            </p>
          </motion.div>
        </motion.div>
      </div>
    </section>
  )
}

//////////////////////////////////////////// components\hero.tsx //////////////////////////////////////////// 
"use client"

import { useEffect, useRef, useState } from "react"
import { Button } from "@/components/ui/button"
import { motion, useScroll, useTransform } from "framer-motion"
import { useLanguage } from "./language-selector"

import { MorphingText } from "@/components/magicui/morphing-text";
import SlideArrowButton from "./SlideArrowButton";
import { InteractiveHoverButton } from "@/components/magicui/interactive-hover-button";

export function Hero() {
  const containerRef = useRef<HTMLDivElement>(null)
  const { scrollYProgress } = useScroll({
    target: containerRef,
    offset: ["start start", "end start"],
  })

  const opacity = useTransform(scrollYProgress, [0, 0.5], [1, 0])
  const scale = useTransform(scrollYProgress, [0, 0.5], [1, 0.9])
  const y = useTransform(scrollYProgress, [0, 0.5], [0, 100])

  const [mounted, setMounted] = useState(false)
  const { t } = useLanguage()

  useEffect(() => {
    setMounted(true)
  }, [])

  useEffect(() => {
    if (containerRef.current) {
      const textContainer = containerRef.current.querySelector('.max-w-3xl');
      if (textContainer) {
      }
    }
  }, [mounted]);

  if (!mounted) return null

  return (
    <section
      ref={containerRef}
      className="relative min-h-screen flex items-center justify-center overflow-hidden pt-10"
    >
      <motion.video
        className="background-orb"
        autoPlay
        loop
        muted
        playsInline
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 1.5, ease: [0.22, 1, 0.36, 1] }}
      >
        <source src="/orb.mp4" type="video/mp4" />
      </motion.video>

      <motion.div style={{ opacity, scale, y }} className="container mx-auto px-4 z-10 py-5">
        <div className="max-w-5xl mx-auto text-center">
          <motion.div
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 1.5, ease: [0.22, 1, 0.36, 1] }}
          >
            <h1 className="text-5xl md:text-6xl lg:text-7xl font-extrabold text-foreground leading-tight mb-16 tracking-tight">
              {t("hero.title") as string}
              <MorphingText texts={t("hero.morphingTexts") as string[]} className="inline-block ml-2" />
            </h1>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: -40 }}
            transition={{ duration: 0.8, delay: 1.7, ease: [0.22, 1, 0.36, 1] }}
          >
            <p className="text-lg md:text-xl text-foreground/90 mb-8 max-w-2xl mx-auto">{t("hero.subtitle") as string}</p>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 2.0, ease: [0.22, 1, 0.36, 1] }}
            className="flex flex-col items-center sm:flex-row gap-6 justify-center"
          >
            <InteractiveHoverButton onClick={() => document.getElementById('contact')?.scrollIntoView({ behavior: 'smooth' })}>{t("hero.cta.primary") as string}</InteractiveHoverButton>

          </motion.div>
        </div>
      </motion.div>
      <div
        className="absolute bottom-0 left-0 w-full h-[400px] z-5"
        style={{
          background: 'linear-gradient(to top, hsl(var(--hero-bottom-transition)), transparent)',
          pointerEvents: 'none',
        }}
      ></div>
    </section>
  )
}



//////////////////////////////////////////// components\faq.tsx //////////////////////////////////////////// 
"use client";

import { useRef, useState, useEffect } from "react";
import { motion, useInView } from "framer-motion";
import dynamic from "next/dynamic";
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { cn } from "@/lib/utils";
import { Card } from "@/components/ui/card"; // Import Card
const MagicCard = dynamic(() => import("@/components/magicui/magic-card").then((mod) => mod.MagicCard), { ssr: false });
import { useLanguage } from "./language-selector";
import { useActiveSection } from "@/context/ActiveSectionContext";


interface FAQItem {
  question: string;
  answer: string;
}

export function FAQ() {
  const ref = useRef(null);
  const isInView = useInView(ref, { once: true, amount: 0.2 });
  const { t } = useLanguage();
  const { activeSection } = useActiveSection();
  const [animationKey, setAnimationKey] = useState(0);
  const faqItems = t<FAQItem[]>("faq.items", { returnObjects: true });

  useEffect(() => {
    if (activeSection === "#faq3") {
      setAnimationKey(prevKey => prevKey + 1);
    }
  }, [activeSection]);

  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
        delayChildren: 0.3,
      },
    },
  };

  const item = {
    hidden: { opacity: 0, y: 50 },
    show: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.8,
        ease: [0.22, 1, 0.36, 1],
      },
    },
  };
  return (
    <section id="faq3" className="py-10">
      <div className="section-container py-16 bg-background">
        <div className="text-center max-w-3xl mx-auto mb-16">
          <motion.h2
            ref={ref}
            initial={{ opacity: 0, y: 50 }}
            animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 50 }}
            transition={{ duration: 0.8, ease: [0.22, 1, 0.36, 1] }}
            className="text-4xl font-bold tracking-tight text-foreground sm:text-5xl mb-6"
          >
            {t("faq.title")}
          </motion.h2>
          <motion.p
            initial={{ opacity: 0, y: 50 }}
            animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 50 }}
            transition={{ duration: 0.8, delay: 0.2, ease: [0.22, 1, 0.36, 1] }}
            className="text-xl text-muted-foreground"
          >
            {t("faq.subtitle")}
          </motion.p>
        </div>

        <motion.div
          key={animationKey}
          variants={container}
          initial="hidden"
          animate={isInView ? "show" : "hidden"}
          className="mx-auto max-w-3xl"
        >
          <Accordion type="single" collapsible className="w-full">
            {Array.isArray(faqItems) && faqItems.map((faqItem, index) => (
              <motion.div key={index} variants={item}>
                <MagicCard
                  className="h-full transition-all duration-500 group-hover:card-shadow-hover overflow-hidden group bg-background mb-4" // Using custom hover shadow
                >
                  <Card className="h-full w-full border-none shadow-none"> {/* Nested Card with no border/shadow */}
                    <AccordionItem
                      value={`item-${index + 1}`}
                      className={cn(
                        "border-none px-8",
                        index === 0 && "border-b-0"
                      )}
                    >
                      <AccordionTrigger className="py-6 text-base sm:text-xl font-medium text-foreground hover:no-underline">
                        {faqItem.question as string}
                      </AccordionTrigger>
                      <AccordionContent className="pb-6 text-base text-muted-foreground">
                        {faqItem.answer as string}
                      </AccordionContent>
                    </AccordionItem>
                  </Card>
                </MagicCard>
              </motion.div>
            ))}
          </Accordion>
        </motion.div>
      </div>
    </section>
  );
}

//////////////////////////////////////////// components\case-studies.tsx //////////////////////////////////////////// 
"use client"

import { useRef, useState, useEffect } from "react"
import { motion, useInView } from "framer-motion"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { ArrowRight } from "lucide-react"
import { useLanguage } from "./language-selector"
import dynamic from 'next/dynamic';
import { useActiveSection } from "@/context/ActiveSectionContext"

const MagicCard = dynamic(() => import('@/components/magicui/magic-card').then(mod => mod.MagicCard), { ssr: false });

export function CaseStudies() {
  const ref = useRef(null)
  const isInView = useInView(ref, { once: true, amount: 0.2 })
  const { t } = useLanguage()
  const { activeSection } = useActiveSection()
  const [animationKey, setAnimationKey] = useState(0)

  useEffect(() => {
    if (activeSection === "#case-studies") {
      setAnimationKey(prevKey => prevKey + 1)
    }
  }, [activeSection])

  const caseStudies = [
    {
      title: t("caseStudy.manufacturing.title"),
      company: t("caseStudy.manufacturing.company"),
      description: t("caseStudy.manufacturing.description"),
      outcome: t("caseStudy.manufacturing.outcome"),
      tags: ["Process Automation", "Predictive Analytics"],
      roi: t("caseStudy.manufacturing.roi"),
    },
    {
      title: t("caseStudy.support.title"),
      company: t("caseStudy.support.company"),
      description: t("caseStudy.support.description"),
      outcome: t("caseStudy.support.outcome"),
      tags: ["Chatbot", "Customer Experience"],
      roi: t("caseStudy.support.roi"),
    },
    {
      title: t("caseStudy.legal.title"),
      company: t("caseStudy.legal.company"),
      description: t("caseStudy.legal.description"),
      outcome: t("caseStudy.legal.outcome"),
      tags: ["Document Processing", "RAG System"],
      roi: t("caseStudy.legal.roi"),
    },
  ]

  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
        delayChildren: 0.3,
      },
    },
  }

  const item = {
    hidden: { opacity: 0, y: 50 },
    show: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.8,
        ease: [0.22, 1, 0.36, 1],
      },
    },
  }

  return (
    <section id="case-studies" className="py-10">
      <div className="section-container py-16 bg-background">
        <div className="text-center max-w-3xl mx-auto mb-16">
          <motion.h2
            ref={ref}
            initial={{ opacity: 0, y: 50 }}
            animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 50 }}
            transition={{ duration: 0.8, ease: [0.22, 1, 0.36, 1] }}
            className="text-4xl sm:text-5xl font-bold text-foreground mb-6"
          >
            {t("caseStudies.title")}
          </motion.h2>
          <motion.p
            initial={{ opacity: 0, y: 50 }}
            animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 50 }}
            transition={{ duration: 0.8, delay: 0.2, ease: [0.22, 1, 0.36, 1] }}
            className="text-xl text-muted-foreground"
          >
            {t("caseStudies.subtitle")}
          </motion.p>
        </div>

        <motion.div
          key={animationKey}
          variants={container}
          initial="hidden"
          animate={isInView ? "show" : "hidden"}
          className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 items-stretch"
        >
          {caseStudies.map((study, index) => (
            <CaseStudyCard key={index} study={study} item={item} t={t} />
          ))}
        </motion.div>
      </div>
    </section>
  )
}

interface CaseStudy {
  company: string | string[];
  title: string | string[];
  description: string | string[];
  outcome: string | string[];
  tags: string[];
  roi: string | string[];
}

function CaseStudyCard({
  study,
  item,
  t
}: {
  study: CaseStudy;
  item: any; // Motion variant type would be more specific if available
  t: (key: string) => string | string[];
}) {
  return (
    <motion.div variants={item}>
      <MagicCard
        className="h-full transition-all duration-500 group-hover:card-shadow-hover overflow-hidden group bg-background mb-4"
      >
        <Card className="h-full w-full border-none shadow-none flex flex-col">
          <CardHeader className="pb-2 flex-shrink-0">
            <div className="text-sm text-muted-foreground mb-1">{study.company}</div>
            <CardTitle className="text-2xl font-semibold text-foreground">{study.title}</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex flex-col h-[320px]"> {/* New inner div with fixed height */}
              <CardDescription className="text-muted-foreground mb-4 text-base">{study.description}</CardDescription>
              <div className="pt-4 border-t border-border flex-grow overflow-hidden"> {/* Outcome and tags div, now flex-growing */}
                <p className="text-sm font-medium text-primary mb-2">{t("caseStudy.outcome")}</p>
                <p className="text-foreground/90 mb-4">{study.outcome}</p>
                <div className="flex flex-wrap gap-2 mb-4">
                  {study.tags.map((tag: string, i: number) => (
                    <Badge key={i} variant="secondary" className="bg-primary/10 text-primary hover:bg-primary/20">
                      {tag}
                    </Badge>
                  ))}
                </div>
              </div>
            </div> {/* End of new inner div */}
          </CardContent>
          <CardFooter className="flex justify-between items-center border-t border-border pt-4 px-6 pb-6 flex-shrink-0">
            <div className="font-semibold text-orange-400 text-sm">{study.roi}</div>
            <motion.button
              whileHover={{ x: 5 }}
              className="text-primary hover:text-primary/90 flex items-center text-sm font-medium"
            >
              {t("caseStudy.readMore")} <ArrowRight size={16} className="ml-1" />
            </motion.button>
          </CardFooter>
        </Card>
      </MagicCard>
    </motion.div>
  );
}


//////////////////////////////////////////// components\header.tsx //////////////////////////////////////////// 
"use client"

import { useState, useEffect } from "react"
import Link from "next/link"
import { usePathname, useRouter } from "next/navigation"
import { Menu, X } from "lucide-react"
import { Button } from "@/components/ui/button"
import { LanguageSelector, useLanguage } from "./language-selector"
import { ThemeToggle } from "./theme-toggle"
import { cn } from "@/lib/utils"
import { motion } from "framer-motion"
import { ScrollProgress } from "./magicui/scroll-progress"
import { InteractiveHoverButton } from "@/components/magicui/interactive-hover-button";
import { useActiveSection } from "@/context/ActiveSectionContext"

export function Header() {
  const [isScrolled, setIsScrolled] = useState(false)
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false)
  const [isDropdownOpen, setIsDropdownOpen] = useState(false)
  const { t } = useLanguage()
  const { setActiveSection } = useActiveSection()

  const router = useRouter()
  const pathname = usePathname()

  useEffect(() => {
    // Set initial active section based on URL hash
    if (typeof window !== "undefined") {
      setActiveSection(window.location.hash)
    }
  }, [pathname])

  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 10)
    }
    window.addEventListener("scroll", handleScroll)
    return () => window.removeEventListener("scroll", handleScroll)
  }, [])

  useEffect(() => {
    if (isDropdownOpen) {
      document.body.classList.add("dropdown-open")
    } else {
      document.body.classList.remove("dropdown-open")
    }
  }, [isDropdownOpen])

  return (
    <>
      <ScrollProgress />
      <motion.header
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.8, delay: 1.9, ease: [0.22, 1, 0.36, 1] }}
        className={cn(
          "fixed top-0 left-0 right-0 z-50 transition-all duration-300",
        isScrolled ? "bg-background/75 backdrop-blur-sm shadow-sm py-3" : "bg-transparent py-5",
      )}
    >
      <div className="container mx-auto px-4 flex items-center justify-between">
        <Link href="/" className="flex items-center space-x-4">
          <svg width="50" height="50" display="block" version="1.1" viewBox="0 0 1775.3214 1272.9539" xmlns="http://www.w3.org/2000/svg" className="fill-black dark:fill-white stroke-black dark:stroke-white"><path d="m 1199.8592,432.71299 c 32.353,-1.16292 70.0807,0.25492 102.4437,0.44441 24.145,0.13987 31.6606,-2.08332 55.4876,2.05061 2.386,2.31004 4.804,4.62572 7.041,7.11961 6.275,6.99554 8.894,17.6806 8.875,27.41142 -0.016,8.36374 -1.985,18.3066 -6.426,25.13633 -11.438,17.59036 -30.488,35.83945 -44.336,51.42093 l -91.487,103.03248 -324.59903,364.95242 c -5.055,5.572 -12.337,14.6633 -18.692,17.9682 -17.971,9.3281 -46.36211,6.5416 -54.49537,6.5416 -6.22864,0 -136.34784,-2.0053 -172.27584,-2.3549 -17.599,-0.056 -54.06779,0.032 -71.52879,-2.3594 -6.806,-0.925 -18.38167,-5.1011 -23.46567,-10.6957 -7.502,-8.2453 -8.0292,-11.8201 -8.1702,-23.44923 -0.187,-15.4642 11.47187,-27.5878 20.33087,-37.8972 64.757,-75.41467 132.141,-148.44937 198.054,-222.60073 15.918,-17.81031 31.727,-35.7447 47.426,-53.80203 8.844,-10.16507 18.616,-24.13697 29.071,-31.85891 22.743,-16.79741 67.65503,4.96861 95.48303,-19.74813 23.118,-20.53205 44.144,-45.99437 64.635,-69.76476 l 45.078,-51.31603 c 16.277,-18.70703 53.601,-66.41475 72.558,-75.3278 15.504,-7.2888 52.1547,-4.59977 68.9927,-4.90319 z" display="none" strokeWidth="1.06205"/><path d="M 1113.2732,517.15981 971.82332,674.60062 a 55.102973,55.102973 155.96877 0 1 -40.98966,18.27655 H 877.0365 a 55.204069,55.204069 156.00781 0 0 -41.01455,18.25416 l -341.3636,378.91497 a 10.935002,10.935002 66.007806 0 0 8.12429,18.2542 h 54.82056 83.1675 190.5909 a 55.103033,55.103033 155.96879 0 0 40.98967,-18.2765 L 1387.0315,517.1598 a 10.955052,10.955052 65.968791 0 0 -8.1491,-18.27654 l -224.6196,0 a 55.102973,55.102973 155.96877 0 0 -40.9896,18.27655 z" display="inline" opacity="0.2" fillOpacity="1" strokeWidth="0" strokeDasharray="none" strokeOpacity="1" transform="translate(-491.84764,164.74937)"/><path d="M 1113.2732,517.15981 971.82332,674.60062 a 55.102973,55.102973 155.96877 0 1 -40.98966,18.27655 H 877.0365 a 55.204069,55.204069 156.00781 0 0 -41.01455,18.25416 l -341.3636,378.91497 a 10.935002,10.935002 66.007806 0 0 8.12429,18.2542 h 54.82056 83.1675 190.5909 a 55.103033,55.103033 155.96879 0 0 40.98967,-18.2765 L 1387.0315,517.1598 a 10.955052,10.955052 65.968791 0 0 -8.1491,-18.27654 l -224.6196,0 a 55.102973,55.102973 155.96877 0 0 -40.9896,18.27655 z" display="inline" fillOpacity="1" strokeWidth="0" strokeDasharray="none" strokeOpacity="1" transform="translate(385.48407,164.74938)"/><path d="M 1113.2732,517.15981 971.82332,674.60062 a 55.102973,55.102973 155.96877 0 1 -40.98966,18.27655 H 877.0365 a 55.204069,55.204069 156.00781 0 0 -41.01455,18.25416 l -341.3636,378.91497 a 10.935002,10.935002 66.007806 0 0 8.12429,18.2542 h 54.82056 83.1675 190.5909 a 55.103033,55.103033 155.96879 0 0 40.98967,-18.2765 L 1387.0315,517.1598 a 10.955052,10.955052 65.968791 0 0 -8.1491,-18.27654 l -224.6196,0 a 55.102973,55.102973 155.96877 0 0 -40.9896,18.27655 z" display="inline" opacity="0.6" fillOpacity="1" strokeWidth="0" strokeDasharray="none" strokeOpacity="1" transform="translate(-55.218187,164.74938)"/><path d="M 1113.2732,517.15981 971.82332,674.60062 a 55.102973,55.102973 155.96877 0 1 -40.98966,18.27655 H 877.0365 a 55.204069,55.204069 156.00781 0 0 -41.01455,18.25416 l -341.3636,378.91497 a 10.935002,10.935002 66.007806 0 0 8.12429,18.2542 h 54.82056 83.1675 190.5909 a 55.103033,55.103033 155.96879 0 0 40.98967,-18.2765 L 1387.0315,517.1598 a 10.955052,10.955052 65.968791 0 0 -8.1491,-18.27654 l -224.6196,0 a 55.102973,55.102973 155.96877 0 0 -40.9896,18.27655 z" display="inline" opacity="0.2" fillOpacity="1" strokeWidth="0" strokeDasharray="none" strokeOpacity="1" transform="matrix(1,0,0,-1,-491.84763,1108.1787)"/><path d="M 1113.2732,517.15981 971.82332,674.60062 a 55.102973,55.102973 155.96877 0 1 -40.98966,18.27655 H 877.0365 a 55.204069,55.204069 156.00781 0 0 -41.01455,18.25416 l -341.3636,378.91497 a 10.935002,10.935002 66.007806 0 0 8.12429,18.2542 h 54.82056 83.1675 190.5909 a 55.103033,55.103033 155.96879 0 0 40.98967,-18.2765 L 1387.0315,517.1598 a 10.955052,10.955052 65.968791 0 0 -8.1491,-18.27654 l -224.6196,0 a 55.102973,55.102973 155.96877 0 0 -40.9896,18.27655 z" display="inline" fillOpacity="1" strokeWidth="0" strokeDasharray="none" strokeOpacity="1" transform="matrix(1,0,0,-1,385.48407,1108.1787)"/><path d="M 1113.2732,517.15981 971.82332,674.60062 a 55.102973,55.102973 155.96877 0 1 -40.98966,18.27655 H 877.0365 a 55.204069,55.204069 156.00781 0 0 -41.01455,18.25416 l -341.3636,378.91497 a 10.935002,10.935002 66.007806 0 0 8.12429,18.2542 h 54.82056 83.1675 190.5909 a 55.103033,55.103033 155.96879 0 0 40.98967,-18.2765 L 1387.0315,517.1598 a 10.955052,10.955052 65.968791 0 0 -8.1491,-18.27654 l -224.6196,0 a 55.102973,55.102973 155.96877 0 0 -40.9896,18.27655 z" display="inline" opacity="0.6" fillOpacity="1" strokeWidth="0" strokeDasharray="none" strokeOpacity="1" transform="matrix(1,0,0,-1,-55.218228,1108.1787)"/></svg>
          <span
            className={cn("font-goldman text-2xl transition-colors", isScrolled ? "text-foreground" : "text-foreground")}
          >
            FasterOperations
          </span>
        </Link>

        <nav className="hidden md:flex items-center space-x-8">
          <NavLinks isScrolled={isScrolled} />
          <div className="flex items-center space-x-4">
            <ThemeToggle />
            <LanguageSelector onDropdownChange={setIsDropdownOpen} />
            <InteractiveHoverButton onClick={() => document.getElementById('contact')?.scrollIntoView({ behavior: 'smooth' })}>{t("cta.bookConsultation")}</InteractiveHoverButton>
          </div>
        </nav>

        <button className="md:hidden text-foreground" onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}>
          {isMobileMenuOpen ? <X size={24} /> : <Menu size={24} />}
        </button>
      </div>

      {isMobileMenuOpen && (
        <motion.div
          initial={{ opacity: 0, height: 0 }}
          animate={{ opacity: 1, height: "auto" }}
          exit={{ opacity: 0, height: 0 }}
          transition={{ duration: 0.3 }}
          className="md:hidden bg-background absolute top-full left-0 right-0 shadow-lg"
        >
          <div className="container mx-auto px-4 py-4 flex flex-col items-center space-y-4">
            <NavLinks mobile />
            <div className="flex flex-col items-center space-y-4 pt-4 border-t border-border">
              <div className="flex items-center justify-between">
                <ThemeToggle />
                <LanguageSelector onDropdownChange={setIsDropdownOpen} />
              </div>
              <InteractiveHoverButton onClick={() => document.getElementById('contact')?.scrollIntoView({ behavior: 'smooth' })}>{t("cta.bookConsultation")}</InteractiveHoverButton>
            </div>
          </div>
        </motion.div>
      )}
    <ScrollProgress className="absolute bottom-0 left-0 right-0" />
    </motion.header>
    </>
  )
}

interface NavLinksProps {
  isScrolled?: boolean;
  mobile?: boolean;
}

function NavLinks({ isScrolled = false, mobile = false }: NavLinksProps) {
  const { t } = useLanguage()
  const router = useRouter()
  const { setActiveSection } = useActiveSection()

  const linkClass = cn(
    "transition-colors font-medium",
    mobile ? "block py-2" : "",
    isScrolled ? "text-foreground hover:text-primary" : "text-foreground hover:text-primary",
  )

  const links = [
    { href: "#services", label: t("nav.services") },
    { href: "#case-studies", label: t("nav.caseStudies") },
    { href: "#about", label: t("nav.about") },
    { href: "#contact", label: t("nav.contact") },
  ]

  return (
    <>
      {links.map((link, index) => (
        <Link
          key={index}
          href={link.href}
          className={linkClass}
          onClick={(e) => {
            e.preventDefault()
            window.location.hash = link.href.substring(1)
            setActiveSection(link.href)
            document.getElementById(link.href.substring(1))?.scrollIntoView({ behavior: 'smooth' })
          }}
        >
          {link.label}
        </Link>
      ))}
    </>
  )
}

//////////////////////////////////////////// app\globals.css //////////////////////////////////////////// 
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  /* CSS Custom Properties for Design System */
  :root {
    /* App backgrounds */
    --app-background: 40 20% 96%; /* Light mode app background */
    --hero-bottom-transition: 40 20% 96%;
    /* Core theme colors */
    --background: 40 20% 96%;
    --foreground: 222.2 84% 4.9%;
    --card: 40 20% 95%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 190 3% 53%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 221 83% 53%;
    --radius: 10px;
    /* Card styles */
    --card-box-shadow-light: rgba(0, 0, 0, 0.08) 0px 0.706592px 0.706592px -0.666667px, rgba(0, 0, 0, 0.08) 0px 1.80656px 1.80656px -1.33333px, rgba(0, 0, 0, 0.07) 0px 3.62176px 3.62176px -2px, rgba(0, 0, 0, 0.07) 0px 6.8656px 6.8656px -2.66667px, rgba(0, 0, 0, 0.05) 0px 13.6468px 13.6468px -3.33333px, rgba(0, 0, 0, 0.02) 0px 30px 30px -4px, rgb(255, 255, 255) 0px 3px 1px 0px inset;
    --card-box-shadow-light-small: rgba(0, 0, 0, 0.08) 0px 0.706592px 0.706592px -0.666667px, rgba(0, 0, 0, 0.08) 0px 1.80656px 1.80656px -1.33333px, rgba(0, 0, 0, 0.07) 0px 3.62176px 3.62176px -2px, rgba(0, 0, 0, 0.07) 0px 6.8656px 6.8656px -2.66667px, rgba(0, 0, 0, 0.05) 0px 13.6468px 13.6468px -3.33333px, rgba(0, 0, 0, 0.02) 0px 30px 30px -4px, rgb(255, 255, 255) 0px 3px 1px 0px inset;
    --card-opacity: 1;
    --card-box-shadow-hover-light: rgba(0, 0, 0, 0.15) 0px 8px 25px, rgba(0, 0, 0, 0.08) 0px 4px 8px;

    /* Sidebar colors */
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }

  .dark {
    /* App backgrounds */
    --app-background: 0 0% 4%; /* Dark mode app background */
    --hero-bottom-transition: 0 0% 4%;
    /* Core theme colors */
    --background: 0 0% 4%;
    --foreground: 210 40% 98%;
    --card: 200 10% 7%;
    --card-foreground: 210 40% 98%;
    --popover: 0 0% 0%;
    --popover-foreground: 210 40% 98%;
    --primary: 200 98% 50%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 0 0% 0%;
    --secondary-foreground: 210 40% 98%;
    --muted: 0 0% 0%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 0 0% 0%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 0 0% 10%;
    --input: 0 0% 0%;
    --ring: 221 83% 53%;
    --card-box-shadow-dark: rgba(255, 255, 255, 0.146) 0px 0px 1px 1px inset;
    --card-box-shadow-dark-small: rgba(255, 255, 255, 0.146) 0px 0px 1px 1px inset;
    --card-box-shadow-hover-dark: rgba(255, 255, 255, 0.15) 0px 8px 25px, rgba(255, 255, 255, 0.08) 0px 4px 8px;
    
    /* Sidebar colors */
    --sidebar-background: 0 0% 0%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 0 0% 0%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 0 0% 0%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }

 .dark .orbal-button {
   background: white;
   color: #1a1a1a;
   box-shadow:
       0 4px 15px rgba(255, 255, 255, 0.1),
       0 2px 4px rgba(255, 255, 255, 0.05);
 }

 .dark .orbal-button::before {
   background: linear-gradient(
       90deg,
       transparent,
       rgba(0, 0, 0, 0.15),
       transparent
   );
 }

 .dark .orbal-button:hover {
   background: #f0f0f0;
   box-shadow:
       0 8px 25px rgba(255, 255, 255, 0.15),
       0 4px 8px rgba(255, 255, 255, 0.08);
 }

 .dark .secondary-button {
   background: #1a1a1a;
   color: white;
   border: 1px solid rgba(255, 255, 255, 0.08);
 }

 .dark .secondary-button:hover {
   background: #2a2a2a;
   border-color: rgba(255, 255, 255, 0.12);
 }

  /* Global styles */
  html {
    overflow-y: scroll; /* Always show scrollbar to prevent layout shift */
  }

  body {
    @apply text-foreground;
    display: flex;
    flex-direction: column;
    min-height: 100vh;
  }

  /* Typography */
  h1, h2, h3, h4, h5, h6 {
    font-family: "Urbanist", "Urbanist Placeholder", sans-serif;
  }

  p, span, div, a, button, input, textarea, select, li {
    font-family: "Satoshi", sans-serif;
  }

  /* Border utility */
  * {
    @apply border-border;
  }

  /* App background utilities */
  .app-background {
    background-color: hsl(var(--app-background));
  }

  .card-shadow {
    box-shadow: var(--card-box-shadow-light);
  }

  .dark .card-shadow {
    box-shadow: var(--card-box-shadow-dark);
  }
  
    .group:hover .card-shadow-hover {
      box-shadow: var(--card-box-shadow-hover-light);
    }
  
    .dark .group:hover .card-shadow-hover {
      box-shadow: var(--card-box-shadow-hover-dark);
    }

}

@layer components {
  .section-container {
    max-width: 1200px;
    margin: 1rem auto;
    padding: 0 1rem;
    border-radius: var(--radius);
  }

  @media (max-width: 767px) {
    .section-container {
      margin: 0 auto; /* Remove vertical margin for mobile */
    }
  }

  @media (min-width: 768px) {
    .section-container {
      padding: 0 2rem;
    }
  }

  /* Fix for dropdown menu causing layout shift */
  .dropdown-open {
    margin-right: calc(100% - 100vw);
  }

  /* ORB inside HERO */
  .background-orb {
    position: absolute;
    top: -13%;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    z-index: 0;
    transition: filter 0.3s ease, transform 0.3s ease;
    transform: scale(1.35);
    transform-origin: center center;
  }

  .light .background-orb {
    filter: invert(1) sepia(0.1) saturate(0.4) hue-rotate(70deg) opacity(0.9) contrast(1.2);
  }

  .dark .background-orb {
    filter: sepia(0.5) saturate(0.4) hue-rotate(320deg) brightness(1.0) opacity(0.8) contrast(1.2);
  }
}


/******* Call to Action Button *****/

.orbal-button {
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0.55rem 2.0rem;
    background: #1a1a1a;
    color: white;
    border: none;
    border-radius: 9999px;
    font-size: 1rem;
    font-weight: 600;
    letter-spacing: 0.025em;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow: 
        0 4px 15px rgba(0, 0, 0, 0.1),
        0 2px 4px rgba(0, 0, 0, 0.05);
    overflow: hidden;
}

.orbal-button::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
        90deg,
        transparent,
        rgba(255, 255, 255, 0.15),
        transparent
    );
    transition: left 0.6s ease;
}

.orbal-button:hover {
    transform: translateY(-2px);
    box-shadow: 
        0 8px 25px rgba(0, 0, 0, 0.15),
        0 4px 8px rgba(0, 0, 0, 0.08);
    background: #2a2a2a;
}

.orbal-button:hover::before {
    left: 100%;
}

.orbal-button:active {
    transform: translateY(0);
    box-shadow: 
        0 2px 8px rgba(0, 0, 0, 0.12),
        0 1px 2px rgba(0, 0, 0, 0.06);
}

.secondary-button {
    background: white;
    color: #1a1a1a;
    border: 1px solid rgba(0, 0, 0, 0.08);
}

.secondary-button:hover {
    background: #fafafa;
    border-color: rgba(0, 0, 0, 0.12);
}

@keyframes slide {
  from {
    transform: translateX(0);
  }
  to {
    transform: translateX(-100%);
  }
}

@keyframes slide-reverse {
  from {
    transform: translateX(-100%);
  }
  to {
    transform: translateX(0);
  }
}

.animate-slide {
  animation: slide 30s linear infinite;
}

.animate-slide-reverse {
  animation: slide-reverse 30s linear infinite;
}


//////////////////////////////////////////// app\layout.tsx //////////////////////////////////////////// 
import type React from "react"
import type { Metadata } from "next"
import "@/app/globals.css"
import { ThemeProvider } from "@/components/theme-provider"
import { Toaster } from "@/components/ui/toaster"
import { FlickeringGrid } from "@/components/magicui/flickering-grid"
import { LanguageProvider, LanguageSetter } from "@/components/language-selector";
import ScrollToTop from "@/components/ui/scroll-to-top";
import { PostHogProvider } from './providers'
import { ActiveSectionProvider } from "@/context/ActiveSectionContext"

export const metadata: Metadata = {
  title: "FasterOperations - AI Solutions for SMEs",
  description: "Practical AI solutions that deliver real results for small & medium businesses",
  generator: 'v0.dev'
}

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  return (
        <PostHogProvider>
          <LanguageProvider>
            <LanguageSetter>
                <head>
                  <link rel="preconnect" href="https://fonts.googleapis.com" />
                  <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="anonymous" />
                  <link
                    href="https://fonts.googleapis.com/css2?family=Urbanist:wght@300;400;500;600;700;800&display=swap"
                    rel="stylesheet"
                  />
                  <link href="https://fonts.googleapis.com/css2?family=Righteous&display=swap" rel="stylesheet" />
                  <link href="https://fonts.googleapis.com/css2?family=Goldman&display=swap" rel="stylesheet" />
                  <link href="https://api.fontshare.com/v2/css?f[]=satoshi@400,500,700&display=swap" rel="stylesheet" />
                  <link rel="apple-touch-icon" sizes="180x180" href="/favicon_io/apple-touch-icon.png"/>
                  <link rel="icon" type="image/png" sizes="32x32" href="/favicon_io/favicon-32x32.png"/>
                  <link rel="icon" type="image/png" sizes="16x16" href="/favicon_io/favicon-16x16.png"/>
                  <link rel="manifest" href="/favicon_io/site.webmanifest"/>
                  <link rel="mask-icon" href="/favicon_io/safari-pinned-tab.svg" color="#5bbad5"/>
                  <meta name="msapplication-TileColor" content="#da532c"/>
                  <meta name="theme-color" content="#ffffff"/>
                </head>
                <body>
                  <ScrollToTop />
                  <ActiveSectionProvider>
                    <ThemeProvider attribute="class" defaultTheme="dark" enableSystem>
                      {children}
                      <Toaster />
                    </ThemeProvider>
                  </ActiveSectionProvider>
                </body>
            </LanguageSetter>
          </LanguageProvider>
        </PostHogProvider>
  )
}


//////////////////////////////////////////// app\page.tsx //////////////////////////////////////////// 
"use client"

import { Hero } from "@/components/hero"
import { FAQ } from "@/components/faq"
import { FAQ2B } from "@/components/faq2B"
import ProjectShowcase from "@/components/projects"
import { Services } from "@/components/services"
import { CaseStudies } from "@/components/case-studies"
import { BookConsultation } from "@/components/book-consultation"
import { TrustIndicators } from "@/components/trust-indicators"
import { Footer } from "@/components/footer"
import { Header } from "@/components/header"
import ScrollToTopButton from "@/components/ui/ScrollToTopButton"
import TagSlide from "@/components/tag-slide"
import { useLanguage } from "@/components/language-selector"

export default function Home() {
  const { t } = useLanguage();

  return (
      <div className="min-h-screen app-background">
        <Header />
        <main>
          <Hero />
          <Services />
          <TagSlide />
          <ProjectShowcase />
          <CaseStudies />
          <BookConsultation />
          <FAQ />
          <TrustIndicators />
          <ScrollToTopButton />
        </main>
        <Footer />
      </div>
  )
}


//////////////////////////////////////////// lib\utils.ts //////////////////////////////////////////// 
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


